#document:
  #dtd: { name: 'HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"', public: null, system: null }
  #comment: ' NewPage '
  html: { lang: 'en' }
    head:
      meta: { content: 'HTML Tidy for Java (vers. 2009-12-01), see jtidy.sourceforge.net', name: 'generator' }
      #comment: ' Generated by javadoc (version 1.6.0_18) on Wed May 07 13:37:03 PDT 2014 '
      title:
        #text: 'ActionEvent (Java Platform SE 7 )'
      meta: { content: '2014-05-07', name: 'date' }
      meta: { content: 'java.awt.event.ActionEvent class', name: 'keywords' }
      meta: { content: 'SHIFT_MASK', name: 'keywords' }
      meta: { content: 'CTRL_MASK', name: 'keywords' }
      meta: { content: 'META_MASK', name: 'keywords' }
      meta: { content: 'ALT_MASK', name: 'keywords' }
      meta: { content: 'ACTION_FIRST', name: 'keywords' }
      meta: { content: 'ACTION_LAST', name: 'keywords' }
      meta: { content: 'ACTION_PERFORMED', name: 'keywords' }
      meta: { content: 'getActionCommand()', name: 'keywords' }
      meta: { content: 'getWhen()', name: 'keywords' }
      meta: { content: 'getModifiers()', name: 'keywords' }
      meta: { content: 'paramString()', name: 'keywords' }
      link: { title: 'Style', href: '../../../stylesheet.css', type: 'text/css', rel: 'stylesheet' }
    body:
      script: { type: 'text/javascript' }
        #text: '<!--\n    if (location.href.indexOf(\'is-external=true\') == -1) {\n        parent.document.title="ActionEvent (Java Platform SE 7 )";\n    }\n//-->\n'
      noscript:
        div:
          #text: 'JavaScript is disabled on your browser.'
      #comment: ' ========= START OF TOP NAVBAR ======= '
      div: { class: 'topNav' }
        a: { name: 'navbar_top' }
          #comment: '   '
        a: { title: 'Skip navigation links', href: '#skip-navbar_top' }
        a: { name: 'navbar_top_firstrow' }
          #comment: '   '
        #text: ' '
        ul: { title: 'Navigation', class: 'navList' }
          li:
            a: { href: '../../../overview-summary.html' }
              #text: 'Overview'
          li:
            a: { href: 'package-summary.html' }
              #text: 'Package'
          li: { class: 'navBarCell1Rev' }
            #text: 'Class'
          li:
            a: { href: 'class-use/ActionEvent.html' }
              #text: 'Use'
          li:
            a: { href: 'package-tree.html' }
              #text: 'Tree'
          li:
            a: { href: '../../../deprecated-list.html' }
              #text: 'Deprecated'
          li:
            a: { href: '../../../index-files/index-1.html' }
              #text: 'Index'
          li:
            a: { href: '../../../help-doc.html' }
              #text: 'Help'
        div: { class: 'aboutLanguage' }
          em:
            strong:
              #text: 'Java™ Platform'
              br:
              #text: 'Standard Ed. 7'
      div: { class: 'subNav' }
        ul: { class: 'navList' }
          li:
            #text: 'Prev Class'
          li:
            a: { title: 'interface in java.awt.event', href: '../../../java/awt/event/ActionListener.html' }
              span: { class: 'strong' }
                #text: 'Next Class'
        ul: { class: 'navList' }
          li:
            a: { target: '_top', href: '../../../index.html?java/awt/event/ActionEvent.html' }
              #text: 'Frames'
          li:
            a: { target: '_top', href: 'ActionEvent.html' }
              #text: 'No Frames'
        ul: { id: 'allclasses_navbar_top', class: 'navList' }
          li:
            a: { href: '../../../allclasses-noframe.html' }
              #text: 'All Classes'
        div:
          script: { type: 'text/javascript' }
            #text: '<!--\n  allClassesLink = document.getElementById("allclasses_navbar_top");\n  if(window==top) {\n    allClassesLink.style.display = "block";\n  }\n  else {\n    allClassesLink.style.display = "none";\n  }\n  //-->\n'
        div:
          ul: { class: 'subNavList' }
            li:
              #text: 'Summary: '
            li:
              #text: 'Nested | '
            li:
              a: { href: '#field_summary' }
                #text: 'Field'
              #text: ' | '
            li:
              a: { href: '#constructor_summary' }
                #text: 'Constr'
              #text: ' | '
            li:
              a: { href: '#method_summary' }
                #text: 'Method'
          ul: { class: 'subNavList' }
            li:
              #text: 'Detail: '
            li:
              a: { href: '#field_detail' }
                #text: 'Field'
              #text: ' | '
            li:
              a: { href: '#constructor_detail' }
                #text: 'Constr'
              #text: ' | '
            li:
              a: { href: '#method_detail' }
                #text: 'Method'
        a: { name: 'skip-navbar_top' }
          #comment: '   '
      #comment: ' ========= END OF TOP NAVBAR ========= '
      #comment: ' ======== START OF CLASS DATA ======== '
      div: { class: 'header' }
        div: { class: 'subTitle' }
          #text: 'java.awt.event'
        h2: { class: 'title', title: 'Class ActionEvent' }
          #text: 'Class ActionEvent'
      div: { class: 'contentContainer' }
        ul: { class: 'inheritance' }
          li:
            a: { title: 'class in java.lang', href: '../../../java/lang/Object.html' }
              #text: 'java.lang.Object'
          li:
            ul: { class: 'inheritance' }
              li:
                a: { title: 'class in java.util', href: '../../../java/util/EventObject.html' }
                  #text: 'java.util.EventObject'
              li:
                ul: { class: 'inheritance' }
                  li:
                    a: { title: 'class in java.awt', href: '../../../java/awt/AWTEvent.html' }
                      #text: 'java.awt.AWTEvent'
                  li:
                    ul: { class: 'inheritance' }
                      li:
                        #text: 'java.awt.event.ActionEvent'
        div: { class: 'description' }
          ul: { class: 'blockList' }
            li: { class: 'blockList' }
              dl:
                dt:
                  #text: 'All Implemented Interfaces:'
                dd:
                  a: { title: 'interface in java.io', href: '../../../java/io/Serializable.html' }
                    #text: 'Serializable'
              hr:
              br:
              pre:
                #text: 'public class '
                span: { class: 'strong' }
                  #text: 'ActionEvent'
                #text: '\nextends '
                a: { title: 'class in java.awt', href: '../../../java/awt/AWTEvent.html' }
                  #text: 'AWTEvent'
              div: { class: 'block' }
                #text: 'A semantic event which indicates that a component-defined action occurred. This high-level event is generated by a component (such as a '
                code:
                  #text: 'Button'
                #text: ') when the component-specific action occurs (such as being pressed). The event is passed to every '
                code:
                  #text: 'ActionListener'
                #text: ' object that registered to receive such events using the component\'s '
                code:
                  #text: 'addActionListener'
                #text: ' method. '
                p:
                  #text: ''
                  b:
                    #text: 'Note:'
                  #text: ' To invoke an '
                  code:
                    #text: 'ActionEvent'
                  #text: ' on a '
                  code:
                    #text: 'Button'
                  #text: ' using the keyboard, use the Space bar.'
                p:
                  #text: 'The object that implements the '
                  code:
                    #text: 'ActionListener'
                  #text: ' interface gets this '
                  code:
                    #text: 'ActionEvent'
                  #text: ' when the event occurs. The listener is therefore spared the details of processing individual mouse movements and mouse clicks, and can instead process a "meaningful" (semantic) event like "button pressed".'
                p:
                  #text: 'An unspecified behavior will be caused if the '
                  code:
                    #text: 'id'
                  #text: ' parameter of any particular '
                  code:
                    #text: 'ActionEvent'
                  #text: ' instance is not in the range from '
                  code:
                    #text: 'ACTION_FIRST'
                  #text: ' to '
                  code:
                    #text: 'ACTION_LAST'
                  #text: '.'
              dl:
                dt:
                  span: { class: 'strong' }
                    #text: 'Since:'
                dd:
                  #text: '1.1'
                dt:
                  span: { class: 'strong' }
                    #text: 'See Also:'
                dd:
                  a: { title: 'interface in java.awt.event', href: '../../../java/awt/event/ActionListener.html' }
                    code:
                      #text: 'ActionListener'
                  #text: ', '
                  a: { href: 'http://java.sun.com/docs/books/tutorial/uiswing/events/actionlistener.html' }
                    #text: 'Tutorial: How to Write an Action Listener'
                  #text: ', '
                  a: { href: '../../../serialized-form.html#java.awt.event.ActionEvent' }
                    #text: 'Serialized Form'
        div: { class: 'summary' }
          ul: { class: 'blockList' }
            li: { class: 'blockList' }
              #comment: ' =========== FIELD SUMMARY =========== '
              ul: { class: 'blockList' }
                li: { class: 'blockList' }
                  a: { name: 'field_summary' }
                    #comment: '   '
                  #text: ' '
                  h3:
                    #text: 'Field Summary'
                  table: { summary: 'Field Summary table, listing fields, and an explanation', cellspacing: '0', cellpadding: '3', border: '0', class: 'overviewSummary' }
                    caption:
                      span:
                        #text: 'Fields'
                      span: { class: 'tabEnd' }
                        #text: ' '
                    tr:
                      th: { scope: 'col', class: 'colFirst' }
                        #text: 'Modifier and Type'
                      th: { scope: 'col', class: 'colLast' }
                        #text: 'Field and Description'
                    tr: { class: 'altColor' }
                      td: { class: 'colFirst' }
                        code:
                          #text: 'static int'
                      td: { class: 'colLast' }
                        code:
                          strong:
                            a: { href: '../../../java/awt/event/ActionEvent.html#ACTION_FIRST' }
                              #text: 'ACTION_FIRST'
                        #text: ' '
                        div: { class: 'block' }
                          #text: 'The first number in the range of ids used for action events.'
                    tr: { class: 'rowColor' }
                      td: { class: 'colFirst' }
                        code:
                          #text: 'static int'
                      td: { class: 'colLast' }
                        code:
                          strong:
                            a: { href: '../../../java/awt/event/ActionEvent.html#ACTION_LAST' }
                              #text: 'ACTION_LAST'
                        #text: ' '
                        div: { class: 'block' }
                          #text: 'The last number in the range of ids used for action events.'
                    tr: { class: 'altColor' }
                      td: { class: 'colFirst' }
                        code:
                          #text: 'static int'
                      td: { class: 'colLast' }
                        code:
                          strong:
                            a: { href: '../../../java/awt/event/ActionEvent.html#ACTION_PERFORMED' }
                              #text: 'ACTION_PERFORMED'
                        #text: ' '
                        div: { class: 'block' }
                          #text: 'This event id indicates that a meaningful action occured.'
                    tr: { class: 'rowColor' }
                      td: { class: 'colFirst' }
                        code:
                          #text: 'static int'
                      td: { class: 'colLast' }
                        code:
                          strong:
                            a: { href: '../../../java/awt/event/ActionEvent.html#ALT_MASK' }
                              #text: 'ALT_MASK'
                        #text: ' '
                        div: { class: 'block' }
                          #text: 'The alt modifier.'
                    tr: { class: 'altColor' }
                      td: { class: 'colFirst' }
                        code:
                          #text: 'static int'
                      td: { class: 'colLast' }
                        code:
                          strong:
                            a: { href: '../../../java/awt/event/ActionEvent.html#CTRL_MASK' }
                              #text: 'CTRL_MASK'
                        #text: ' '
                        div: { class: 'block' }
                          #text: 'The control modifier.'
                    tr: { class: 'rowColor' }
                      td: { class: 'colFirst' }
                        code:
                          #text: 'static int'
                      td: { class: 'colLast' }
                        code:
                          strong:
                            a: { href: '../../../java/awt/event/ActionEvent.html#META_MASK' }
                              #text: 'META_MASK'
                        #text: ' '
                        div: { class: 'block' }
                          #text: 'The meta modifier.'
                    tr: { class: 'altColor' }
                      td: { class: 'colFirst' }
                        code:
                          #text: 'static int'
                      td: { class: 'colLast' }
                        code:
                          strong:
                            a: { href: '../../../java/awt/event/ActionEvent.html#SHIFT_MASK' }
                              #text: 'SHIFT_MASK'
                        #text: ' '
                        div: { class: 'block' }
                          #text: 'The shift modifier.'
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      a: { name: 'fields_inherited_from_class_java.awt.AWTEvent' }
                        #comment: '   '
                      #text: ' '
                      h3:
                        #text: 'Fields inherited from class java.awt.'
                        a: { title: 'class in java.awt', href: '../../../java/awt/AWTEvent.html' }
                          #text: 'AWTEvent'
                      code:
                        a: { href: '../../../java/awt/AWTEvent.html#ACTION_EVENT_MASK' }
                          #text: 'ACTION_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#ADJUSTMENT_EVENT_MASK' }
                          #text: 'ADJUSTMENT_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#COMPONENT_EVENT_MASK' }
                          #text: 'COMPONENT_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#consumed' }
                          #text: 'consumed'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#CONTAINER_EVENT_MASK' }
                          #text: 'CONTAINER_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#FOCUS_EVENT_MASK' }
                          #text: 'FOCUS_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#HIERARCHY_BOUNDS_EVENT_MASK' }
                          #text: 'HIERARCHY_BOUNDS_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#HIERARCHY_EVENT_MASK' }
                          #text: 'HIERARCHY_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#id' }
                          #text: 'id'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#INPUT_METHOD_EVENT_MASK' }
                          #text: 'INPUT_METHOD_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#INVOCATION_EVENT_MASK' }
                          #text: 'INVOCATION_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#ITEM_EVENT_MASK' }
                          #text: 'ITEM_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#KEY_EVENT_MASK' }
                          #text: 'KEY_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#MOUSE_EVENT_MASK' }
                          #text: 'MOUSE_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#MOUSE_MOTION_EVENT_MASK' }
                          #text: 'MOUSE_MOTION_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#MOUSE_WHEEL_EVENT_MASK' }
                          #text: 'MOUSE_WHEEL_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#PAINT_EVENT_MASK' }
                          #text: 'PAINT_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#RESERVED_ID_MAX' }
                          #text: 'RESERVED_ID_MAX'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#TEXT_EVENT_MASK' }
                          #text: 'TEXT_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#WINDOW_EVENT_MASK' }
                          #text: 'WINDOW_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#WINDOW_FOCUS_EVENT_MASK' }
                          #text: 'WINDOW_FOCUS_EVENT_MASK'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#WINDOW_STATE_EVENT_MASK' }
                          #text: 'WINDOW_STATE_EVENT_MASK'
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      a: { name: 'fields_inherited_from_class_java.util.EventObject' }
                        #comment: '   '
                      #text: ' '
                      h3:
                        #text: 'Fields inherited from class java.util.'
                        a: { title: 'class in java.util', href: '../../../java/util/EventObject.html' }
                          #text: 'EventObject'
                      code:
                        a: { href: '../../../java/util/EventObject.html#source' }
                          #text: 'source'
              #comment: ' ======== CONSTRUCTOR SUMMARY ======== '
              ul: { class: 'blockList' }
                li: { class: 'blockList' }
                  a: { name: 'constructor_summary' }
                    #comment: '   '
                  #text: ' '
                  h3:
                    #text: 'Constructor Summary'
                  table: { summary: 'Constructor Summary table, listing constructors, and an explanation', cellspacing: '0', cellpadding: '3', border: '0', class: 'overviewSummary' }
                    caption:
                      span:
                        #text: 'Constructors'
                      span: { class: 'tabEnd' }
                        #text: ' '
                    tr:
                      th: { scope: 'col', class: 'colOne' }
                        #text: 'Constructor and Description'
                    tr: { class: 'altColor' }
                      td: { class: 'colOne' }
                        code:
                          strong:
                            a: { href: '../../../java/awt/event/ActionEvent.html#ActionEvent(java.lang.Object,%20int,%20java.lang.String)' }
                              #text: 'ActionEvent'
                          #text: '('
                          a: { title: 'class in java.lang', href: '../../../java/lang/Object.html' }
                            #text: 'Object'
                          #text: ' source, int id, '
                          a: { title: 'class in java.lang', href: '../../../java/lang/String.html' }
                            #text: 'String'
                          #text: ' command)'
                        #text: ' '
                        div: { class: 'block' }
                          #text: 'Constructs an '
                          code:
                            #text: 'ActionEvent'
                          #text: ' object.'
                    tr: { class: 'rowColor' }
                      td: { class: 'colOne' }
                        code:
                          strong:
                            a: { href: '../../../java/awt/event/ActionEvent.html#ActionEvent(java.lang.Object,%20int,%20java.lang.String,%20int)' }
                              #text: 'ActionEvent'
                          #text: '('
                          a: { title: 'class in java.lang', href: '../../../java/lang/Object.html' }
                            #text: 'Object'
                          #text: ' source, int id, '
                          a: { title: 'class in java.lang', href: '../../../java/lang/String.html' }
                            #text: 'String'
                          #text: ' command, int modifiers)'
                        #text: ' '
                        div: { class: 'block' }
                          #text: 'Constructs an '
                          code:
                            #text: 'ActionEvent'
                          #text: ' object with modifier keys.'
                    tr: { class: 'altColor' }
                      td: { class: 'colOne' }
                        code:
                          strong:
                            a: { href: '../../../java/awt/event/ActionEvent.html#ActionEvent(java.lang.Object,%20int,%20java.lang.String,%20long,%20int)' }
                              #text: 'ActionEvent'
                          #text: '('
                          a: { title: 'class in java.lang', href: '../../../java/lang/Object.html' }
                            #text: 'Object'
                          #text: ' source, int id, '
                          a: { title: 'class in java.lang', href: '../../../java/lang/String.html' }
                            #text: 'String'
                          #text: ' command, long when, int modifiers)'
                        #text: ' '
                        div: { class: 'block' }
                          #text: 'Constructs an '
                          code:
                            #text: 'ActionEvent'
                          #text: ' object with the specified modifier keys and timestamp.'
              #comment: ' ========== METHOD SUMMARY =========== '
              ul: { class: 'blockList' }
                li: { class: 'blockList' }
                  a: { name: 'method_summary' }
                    #comment: '   '
                  #text: ' '
                  h3:
                    #text: 'Method Summary'
                  table: { summary: 'Method Summary table, listing methods, and an explanation', cellspacing: '0', cellpadding: '3', border: '0', class: 'overviewSummary' }
                    caption:
                      span:
                        #text: 'Methods'
                      span: { class: 'tabEnd' }
                        #text: ' '
                    tr:
                      th: { scope: 'col', class: 'colFirst' }
                        #text: 'Modifier and Type'
                      th: { scope: 'col', class: 'colLast' }
                        #text: 'Method and Description'
                    tr: { class: 'altColor' }
                      td: { class: 'colFirst' }
                        code:
                          a: { title: 'class in java.lang', href: '../../../java/lang/String.html' }
                            #text: 'String'
                      td: { class: 'colLast' }
                        code:
                          strong:
                            a: { href: '../../../java/awt/event/ActionEvent.html#getActionCommand()' }
                              #text: 'getActionCommand'
                          #text: '()'
                        #text: ' '
                        div: { class: 'block' }
                          #text: 'Returns the command string associated with this action.'
                    tr: { class: 'rowColor' }
                      td: { class: 'colFirst' }
                        code:
                          #text: 'int'
                      td: { class: 'colLast' }
                        code:
                          strong:
                            a: { href: '../../../java/awt/event/ActionEvent.html#getModifiers()' }
                              #text: 'getModifiers'
                          #text: '()'
                        #text: ' '
                        div: { class: 'block' }
                          #text: 'Returns the modifier keys held down during this action event.'
                    tr: { class: 'altColor' }
                      td: { class: 'colFirst' }
                        code:
                          #text: 'long'
                      td: { class: 'colLast' }
                        code:
                          strong:
                            a: { href: '../../../java/awt/event/ActionEvent.html#getWhen()' }
                              #text: 'getWhen'
                          #text: '()'
                        #text: ' '
                        div: { class: 'block' }
                          #text: 'Returns the timestamp of when this event occurred.'
                    tr: { class: 'rowColor' }
                      td: { class: 'colFirst' }
                        code:
                          a: { title: 'class in java.lang', href: '../../../java/lang/String.html' }
                            #text: 'String'
                      td: { class: 'colLast' }
                        code:
                          strong:
                            a: { href: '../../../java/awt/event/ActionEvent.html#paramString()' }
                              #text: 'paramString'
                          #text: '()'
                        #text: ' '
                        div: { class: 'block' }
                          #text: 'Returns a parameter string identifying this action event.'
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      a: { name: 'methods_inherited_from_class_java.awt.AWTEvent' }
                        #comment: '   '
                      #text: ' '
                      h3:
                        #text: 'Methods inherited from class java.awt.'
                        a: { title: 'class in java.awt', href: '../../../java/awt/AWTEvent.html' }
                          #text: 'AWTEvent'
                      code:
                        a: { href: '../../../java/awt/AWTEvent.html#consume()' }
                          #text: 'consume'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#getID()' }
                          #text: 'getID'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#isConsumed()' }
                          #text: 'isConsumed'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#setSource(java.lang.Object)' }
                          #text: 'setSource'
                        #text: ', '
                        a: { href: '../../../java/awt/AWTEvent.html#toString()' }
                          #text: 'toString'
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      a: { name: 'methods_inherited_from_class_java.util.EventObject' }
                        #comment: '   '
                      #text: ' '
                      h3:
                        #text: 'Methods inherited from class java.util.'
                        a: { title: 'class in java.util', href: '../../../java/util/EventObject.html' }
                          #text: 'EventObject'
                      code:
                        a: { href: '../../../java/util/EventObject.html#getSource()' }
                          #text: 'getSource'
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      a: { name: 'methods_inherited_from_class_java.lang.Object' }
                        #comment: '   '
                      #text: ' '
                      h3:
                        #text: 'Methods inherited from class java.lang.'
                        a: { title: 'class in java.lang', href: '../../../java/lang/Object.html' }
                          #text: 'Object'
                      code:
                        a: { href: '../../../java/lang/Object.html#clone()' }
                          #text: 'clone'
                        #text: ', '
                        a: { href: '../../../java/lang/Object.html#equals(java.lang.Object)' }
                          #text: 'equals'
                        #text: ', '
                        a: { href: '../../../java/lang/Object.html#finalize()' }
                          #text: 'finalize'
                        #text: ', '
                        a: { href: '../../../java/lang/Object.html#getClass()' }
                          #text: 'getClass'
                        #text: ', '
                        a: { href: '../../../java/lang/Object.html#hashCode()' }
                          #text: 'hashCode'
                        #text: ', '
                        a: { href: '../../../java/lang/Object.html#notify()' }
                          #text: 'notify'
                        #text: ', '
                        a: { href: '../../../java/lang/Object.html#notifyAll()' }
                          #text: 'notifyAll'
                        #text: ', '
                        a: { href: '../../../java/lang/Object.html#wait()' }
                          #text: 'wait'
                        #text: ', '
                        a: { href: '../../../java/lang/Object.html#wait(long)' }
                          #text: 'wait'
                        #text: ', '
                        a: { href: '../../../java/lang/Object.html#wait(long,%20int)' }
                          #text: 'wait'
        div: { class: 'details' }
          ul: { class: 'blockList' }
            li: { class: 'blockList' }
              #comment: ' ============ FIELD DETAIL =========== '
              ul: { class: 'blockList' }
                li: { class: 'blockList' }
                  a: { name: 'field_detail' }
                    #comment: '   '
                  #text: ' '
                  h3:
                    #text: 'Field Detail'
                  a: { name: 'SHIFT_MASK' }
                    #comment: '   '
                  #text: ' '
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      h4:
                        #text: 'SHIFT_MASK'
                      pre:
                        #text: 'public static final int SHIFT_MASK'
                      div: { class: 'block' }
                        #text: 'The shift modifier. An indicator that the shift key was held down during the event.'
                      dl:
                        dt:
                          span: { class: 'strong' }
                            #text: 'See Also:'
                        dd:
                          a: { href: '../../../constant-values.html#java.awt.event.ActionEvent.SHIFT_MASK' }
                            #text: 'Constant Field Values'
                  a: { name: 'CTRL_MASK' }
                    #comment: '   '
                  #text: ' '
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      h4:
                        #text: 'CTRL_MASK'
                      pre:
                        #text: 'public static final int CTRL_MASK'
                      div: { class: 'block' }
                        #text: 'The control modifier. An indicator that the control key was held down during the event.'
                      dl:
                        dt:
                          span: { class: 'strong' }
                            #text: 'See Also:'
                        dd:
                          a: { href: '../../../constant-values.html#java.awt.event.ActionEvent.CTRL_MASK' }
                            #text: 'Constant Field Values'
                  a: { name: 'META_MASK' }
                    #comment: '   '
                  #text: ' '
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      h4:
                        #text: 'META_MASK'
                      pre:
                        #text: 'public static final int META_MASK'
                      div: { class: 'block' }
                        #text: 'The meta modifier. An indicator that the meta key was held down during the event.'
                      dl:
                        dt:
                          span: { class: 'strong' }
                            #text: 'See Also:'
                        dd:
                          a: { href: '../../../constant-values.html#java.awt.event.ActionEvent.META_MASK' }
                            #text: 'Constant Field Values'
                  a: { name: 'ALT_MASK' }
                    #comment: '   '
                  #text: ' '
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      h4:
                        #text: 'ALT_MASK'
                      pre:
                        #text: 'public static final int ALT_MASK'
                      div: { class: 'block' }
                        #text: 'The alt modifier. An indicator that the alt key was held down during the event.'
                      dl:
                        dt:
                          span: { class: 'strong' }
                            #text: 'See Also:'
                        dd:
                          a: { href: '../../../constant-values.html#java.awt.event.ActionEvent.ALT_MASK' }
                            #text: 'Constant Field Values'
                  a: { name: 'ACTION_FIRST' }
                    #comment: '   '
                  #text: ' '
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      h4:
                        #text: 'ACTION_FIRST'
                      pre:
                        #text: 'public static final int ACTION_FIRST'
                      div: { class: 'block' }
                        #text: 'The first number in the range of ids used for action events.'
                      dl:
                        dt:
                          span: { class: 'strong' }
                            #text: 'See Also:'
                        dd:
                          a: { href: '../../../constant-values.html#java.awt.event.ActionEvent.ACTION_FIRST' }
                            #text: 'Constant Field Values'
                  a: { name: 'ACTION_LAST' }
                    #comment: '   '
                  #text: ' '
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      h4:
                        #text: 'ACTION_LAST'
                      pre:
                        #text: 'public static final int ACTION_LAST'
                      div: { class: 'block' }
                        #text: 'The last number in the range of ids used for action events.'
                      dl:
                        dt:
                          span: { class: 'strong' }
                            #text: 'See Also:'
                        dd:
                          a: { href: '../../../constant-values.html#java.awt.event.ActionEvent.ACTION_LAST' }
                            #text: 'Constant Field Values'
                  a: { name: 'ACTION_PERFORMED' }
                    #comment: '   '
                  #text: ' '
                  ul: { class: 'blockListLast' }
                    li: { class: 'blockList' }
                      h4:
                        #text: 'ACTION_PERFORMED'
                      pre:
                        #text: 'public static final int ACTION_PERFORMED'
                      div: { class: 'block' }
                        #text: 'This event id indicates that a meaningful action occured.'
                      dl:
                        dt:
                          span: { class: 'strong' }
                            #text: 'See Also:'
                        dd:
                          a: { href: '../../../constant-values.html#java.awt.event.ActionEvent.ACTION_PERFORMED' }
                            #text: 'Constant Field Values'
              #comment: ' ========= CONSTRUCTOR DETAIL ======== '
              ul: { class: 'blockList' }
                li: { class: 'blockList' }
                  a: { name: 'constructor_detail' }
                    #comment: '   '
                  #text: ' '
                  h3:
                    #text: 'Constructor Detail'
                  a: { name: 'ActionEvent(java.lang.Object, int, java.lang.String)' }
                    #comment: '   '
                  #text: ' '
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      h4:
                        #text: 'ActionEvent'
                      pre:
                        #text: 'public ActionEvent('
                        a: { title: 'class in java.lang', href: '../../../java/lang/Object.html' }
                          #text: 'Object'
                        #text: ' source,\n           int id,\n           '
                        a: { title: 'class in java.lang', href: '../../../java/lang/String.html' }
                          #text: 'String'
                        #text: ' command)'
                      div: { class: 'block' }
                        #text: 'Constructs an '
                        code:
                          #text: 'ActionEvent'
                        #text: ' object. '
                        p:
                          #text: 'This method throws an '
                          code:
                            #text: 'IllegalArgumentException'
                          #text: ' if '
                          code:
                            #text: 'source'
                          #text: ' is '
                          code:
                            #text: 'null'
                          #text: '. A '
                          code:
                            #text: 'null'
                          #text: ' '
                          code:
                            #text: 'command'
                          #text: ' string is legal, but not recommended.'
                      dl:
                        dt:
                          span: { class: 'strong' }
                            #text: 'Parameters:'
                        dd:
                          code:
                            #text: 'source'
                          #text: ' - The object that originated the event'
                        dd:
                          code:
                            #text: 'id'
                          #text: ' - An integer that identifies the event. For information on allowable values, see the class description for '
                          a: { title: 'class in java.awt.event', href: '../../../java/awt/event/ActionEvent.html' }
                            code:
                              #text: 'ActionEvent'
                        dd:
                          code:
                            #text: 'command'
                          #text: ' - A string that may specify a command (possibly one of several) associated with the event'
                        dt:
                          span: { class: 'strong' }
                            #text: 'Throws:'
                        dd:
                          code:
                            a: { title: 'class in java.lang', href: '../../../java/lang/IllegalArgumentException.html' }
                              #text: 'IllegalArgumentException'
                          #text: ' - if '
                          code:
                            #text: 'source'
                          #text: ' is null'
                        dt:
                          span: { class: 'strong' }
                            #text: 'See Also:'
                        dd:
                          a: { href: '../../../java/util/EventObject.html#getSource()' }
                            code:
                              #text: 'EventObject.getSource()'
                          #text: ', '
                          a: { href: '../../../java/awt/AWTEvent.html#getID()' }
                            code:
                              #text: 'AWTEvent.getID()'
                          #text: ', '
                          a: { href: '../../../java/awt/event/ActionEvent.html#getActionCommand()' }
                            code:
                              #text: 'getActionCommand()'
                  a: { name: 'ActionEvent(java.lang.Object, int, java.lang.String, int)' }
                    #comment: '   '
                  #text: ' '
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      h4:
                        #text: 'ActionEvent'
                      pre:
                        #text: 'public ActionEvent('
                        a: { title: 'class in java.lang', href: '../../../java/lang/Object.html' }
                          #text: 'Object'
                        #text: ' source,\n           int id,\n           '
                        a: { title: 'class in java.lang', href: '../../../java/lang/String.html' }
                          #text: 'String'
                        #text: ' command,\n           int modifiers)'
                      div: { class: 'block' }
                        #text: 'Constructs an '
                        code:
                          #text: 'ActionEvent'
                        #text: ' object with modifier keys. '
                        p:
                          #text: 'This method throws an '
                          code:
                            #text: 'IllegalArgumentException'
                          #text: ' if '
                          code:
                            #text: 'source'
                          #text: ' is '
                          code:
                            #text: 'null'
                          #text: '. A '
                          code:
                            #text: 'null'
                          #text: ' '
                          code:
                            #text: 'command'
                          #text: ' string is legal, but not recommended.'
                      dl:
                        dt:
                          span: { class: 'strong' }
                            #text: 'Parameters:'
                        dd:
                          code:
                            #text: 'source'
                          #text: ' - The object that originated the event'
                        dd:
                          code:
                            #text: 'id'
                          #text: ' - An integer that identifies the event. For information on allowable values, see the class description for '
                          a: { title: 'class in java.awt.event', href: '../../../java/awt/event/ActionEvent.html' }
                            code:
                              #text: 'ActionEvent'
                        dd:
                          code:
                            #text: 'command'
                          #text: ' - A string that may specify a command (possibly one of several) associated with the event'
                        dd:
                          code:
                            #text: 'modifiers'
                          #text: ' - The modifier keys down during event (shift, ctrl, alt, meta). Passing negative parameter is not recommended. Zero value means that no modifiers were passed'
                        dt:
                          span: { class: 'strong' }
                            #text: 'Throws:'
                        dd:
                          code:
                            a: { title: 'class in java.lang', href: '../../../java/lang/IllegalArgumentException.html' }
                              #text: 'IllegalArgumentException'
                          #text: ' - if '
                          code:
                            #text: 'source'
                          #text: ' is null'
                        dt:
                          span: { class: 'strong' }
                            #text: 'See Also:'
                        dd:
                          a: { href: '../../../java/util/EventObject.html#getSource()' }
                            code:
                              #text: 'EventObject.getSource()'
                          #text: ', '
                          a: { href: '../../../java/awt/AWTEvent.html#getID()' }
                            code:
                              #text: 'AWTEvent.getID()'
                          #text: ', '
                          a: { href: '../../../java/awt/event/ActionEvent.html#getActionCommand()' }
                            code:
                              #text: 'getActionCommand()'
                          #text: ', '
                          a: { href: '../../../java/awt/event/ActionEvent.html#getModifiers()' }
                            code:
                              #text: 'getModifiers()'
                  a: { name: 'ActionEvent(java.lang.Object, int, java.lang.String, long, int)' }
                    #comment: '   '
                  #text: ' '
                  ul: { class: 'blockListLast' }
                    li: { class: 'blockList' }
                      h4:
                        #text: 'ActionEvent'
                      pre:
                        #text: 'public ActionEvent('
                        a: { title: 'class in java.lang', href: '../../../java/lang/Object.html' }
                          #text: 'Object'
                        #text: ' source,\n           int id,\n           '
                        a: { title: 'class in java.lang', href: '../../../java/lang/String.html' }
                          #text: 'String'
                        #text: ' command,\n           long when,\n           int modifiers)'
                      div: { class: 'block' }
                        #text: 'Constructs an '
                        code:
                          #text: 'ActionEvent'
                        #text: ' object with the specified modifier keys and timestamp. '
                        p:
                          #text: 'This method throws an '
                          code:
                            #text: 'IllegalArgumentException'
                          #text: ' if '
                          code:
                            #text: 'source'
                          #text: ' is '
                          code:
                            #text: 'null'
                          #text: '. A '
                          code:
                            #text: 'null'
                          #text: ' '
                          code:
                            #text: 'command'
                          #text: ' string is legal, but not recommended.'
                      dl:
                        dt:
                          span: { class: 'strong' }
                            #text: 'Parameters:'
                        dd:
                          code:
                            #text: 'source'
                          #text: ' - The object that originated the event'
                        dd:
                          code:
                            #text: 'id'
                          #text: ' - An integer that identifies the event. For information on allowable values, see the class description for '
                          a: { title: 'class in java.awt.event', href: '../../../java/awt/event/ActionEvent.html' }
                            code:
                              #text: 'ActionEvent'
                        dd:
                          code:
                            #text: 'command'
                          #text: ' - A string that may specify a command (possibly one of several) associated with the event'
                        dd:
                          code:
                            #text: 'modifiers'
                          #text: ' - The modifier keys down during event (shift, ctrl, alt, meta). Passing negative parameter is not recommended. Zero value means that no modifiers were passed'
                        dd:
                          code:
                            #text: 'when'
                          #text: ' - A long that gives the time the event occurred. Passing negative or zero value is not recommended'
                        dt:
                          span: { class: 'strong' }
                            #text: 'Throws:'
                        dd:
                          code:
                            a: { title: 'class in java.lang', href: '../../../java/lang/IllegalArgumentException.html' }
                              #text: 'IllegalArgumentException'
                          #text: ' - if '
                          code:
                            #text: 'source'
                          #text: ' is null'
                        dt:
                          span: { class: 'strong' }
                            #text: 'Since:'
                        dd:
                          #text: '1.4'
                        dt:
                          span: { class: 'strong' }
                            #text: 'See Also:'
                        dd:
                          a: { href: '../../../java/util/EventObject.html#getSource()' }
                            code:
                              #text: 'EventObject.getSource()'
                          #text: ', '
                          a: { href: '../../../java/awt/AWTEvent.html#getID()' }
                            code:
                              #text: 'AWTEvent.getID()'
                          #text: ', '
                          a: { href: '../../../java/awt/event/ActionEvent.html#getActionCommand()' }
                            code:
                              #text: 'getActionCommand()'
                          #text: ', '
                          a: { href: '../../../java/awt/event/ActionEvent.html#getModifiers()' }
                            code:
                              #text: 'getModifiers()'
                          #text: ', '
                          a: { href: '../../../java/awt/event/ActionEvent.html#getWhen()' }
                            code:
                              #text: 'getWhen()'
              #comment: ' ============ METHOD DETAIL ========== '
              ul: { class: 'blockList' }
                li: { class: 'blockList' }
                  a: { name: 'method_detail' }
                    #comment: '   '
                  #text: ' '
                  h3:
                    #text: 'Method Detail'
                  a: { name: 'getActionCommand()' }
                    #comment: '   '
                  #text: ' '
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      h4:
                        #text: 'getActionCommand'
                      pre:
                        #text: 'public '
                        a: { title: 'class in java.lang', href: '../../../java/lang/String.html' }
                          #text: 'String'
                        #text: ' getActionCommand()'
                      div: { class: 'block' }
                        #text: 'Returns the command string associated with this action. This string allows a "modal" component to specify one of several commands, depending on its state. For example, a single button might toggle between "show details" and "hide details". The source object and the event would be the same in each case, but the command string would identify the intended action. '
                        p:
                          #text: 'Note that if a '
                          code:
                            #text: 'null'
                          #text: ' command string was passed to the constructor for this '
                          code:
                            #text: 'ActionEvent'
                          #text: ', this this method returns '
                          code:
                            #text: 'null'
                          #text: '.'
                      dl:
                        dt:
                          span: { class: 'strong' }
                            #text: 'Returns:'
                        dd:
                          #text: 'the string identifying the command for this event'
                  a: { name: 'getWhen()' }
                    #comment: '   '
                  #text: ' '
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      h4:
                        #text: 'getWhen'
                      pre:
                        #text: 'public long getWhen()'
                      div: { class: 'block' }
                        #text: 'Returns the timestamp of when this event occurred. Because an ActionEvent is a high-level, semantic event, the timestamp is typically the same as an underlying InputEvent.'
                      dl:
                        dt:
                          span: { class: 'strong' }
                            #text: 'Returns:'
                        dd:
                          #text: 'this event\'s timestamp'
                        dt:
                          span: { class: 'strong' }
                            #text: 'Since:'
                        dd:
                          #text: '1.4'
                  a: { name: 'getModifiers()' }
                    #comment: '   '
                  #text: ' '
                  ul: { class: 'blockList' }
                    li: { class: 'blockList' }
                      h4:
                        #text: 'getModifiers'
                      pre:
                        #text: 'public int getModifiers()'
                      div: { class: 'block' }
                        #text: 'Returns the modifier keys held down during this action event.'
                      dl:
                        dt:
                          span: { class: 'strong' }
                            #text: 'Returns:'
                        dd:
                          #text: 'the bitwise-or of the modifier constants'
                  a: { name: 'paramString()' }
                    #comment: '   '
                  #text: ' '
                  ul: { class: 'blockListLast' }
                    li: { class: 'blockList' }
                      h4:
                        #text: 'paramString'
                      pre:
                        #text: 'public '
                        a: { title: 'class in java.lang', href: '../../../java/lang/String.html' }
                          #text: 'String'
                        #text: ' paramString()'
                      div: { class: 'block' }
                        #text: 'Returns a parameter string identifying this action event. This method is useful for event-logging and for debugging.'
                      dl:
                        dt:
                          strong:
                            #text: 'Overrides:'
                        dd:
                          code:
                            a: { href: '../../../java/awt/AWTEvent.html#paramString()' }
                              #text: 'paramString'
                          #text: ' in class '
                          code:
                            a: { title: 'class in java.awt', href: '../../../java/awt/AWTEvent.html' }
                              #text: 'AWTEvent'
                        dt:
                          span: { class: 'strong' }
                            #text: 'Returns:'
                        dd:
                          #text: 'a string identifying the event and its associated command'
      #comment: ' ========= END OF CLASS DATA ========= '
      #comment: ' ======= START OF BOTTOM NAVBAR ====== '
      div: { class: 'bottomNav' }
        a: { name: 'navbar_bottom' }
          #comment: '   '
        a: { title: 'Skip navigation links', href: '#skip-navbar_bottom' }
        a: { name: 'navbar_bottom_firstrow' }
          #comment: '   '
        #text: ' '
        ul: { title: 'Navigation', class: 'navList' }
          li:
            a: { href: '../../../overview-summary.html' }
              #text: 'Overview'
          li:
            a: { href: 'package-summary.html' }
              #text: 'Package'
          li: { class: 'navBarCell1Rev' }
            #text: 'Class'
          li:
            a: { href: 'class-use/ActionEvent.html' }
              #text: 'Use'
          li:
            a: { href: 'package-tree.html' }
              #text: 'Tree'
          li:
            a: { href: '../../../deprecated-list.html' }
              #text: 'Deprecated'
          li:
            a: { href: '../../../index-files/index-1.html' }
              #text: 'Index'
          li:
            a: { href: '../../../help-doc.html' }
              #text: 'Help'
        div: { class: 'aboutLanguage' }
          em:
            strong:
              #text: 'Java™ Platform'
              br:
              #text: 'Standard Ed. 7'
      div: { class: 'subNav' }
        ul: { class: 'navList' }
          li:
            #text: 'Prev Class'
          li:
            a: { title: 'interface in java.awt.event', href: '../../../java/awt/event/ActionListener.html' }
              span: { class: 'strong' }
                #text: 'Next Class'
        ul: { class: 'navList' }
          li:
            a: { target: '_top', href: '../../../index.html?java/awt/event/ActionEvent.html' }
              #text: 'Frames'
          li:
            a: { target: '_top', href: 'ActionEvent.html' }
              #text: 'No Frames'
        ul: { id: 'allclasses_navbar_bottom', class: 'navList' }
          li:
            a: { href: '../../../allclasses-noframe.html' }
              #text: 'All Classes'
        div:
          script: { type: 'text/javascript' }
            #text: '<!--\n  allClassesLink = document.getElementById("allclasses_navbar_bottom");\n  if(window==top) {\n    allClassesLink.style.display = "block";\n  }\n  else {\n    allClassesLink.style.display = "none";\n  }\n  //-->\n'
        div:
          ul: { class: 'subNavList' }
            li:
              #text: 'Summary: '
            li:
              #text: 'Nested | '
            li:
              a: { href: '#field_summary' }
                #text: 'Field'
              #text: ' | '
            li:
              a: { href: '#constructor_summary' }
                #text: 'Constr'
              #text: ' | '
            li:
              a: { href: '#method_summary' }
                #text: 'Method'
          ul: { class: 'subNavList' }
            li:
              #text: 'Detail: '
            li:
              a: { href: '#field_detail' }
                #text: 'Field'
              #text: ' | '
            li:
              a: { href: '#constructor_detail' }
                #text: 'Constr'
              #text: ' | '
            li:
              a: { href: '#method_detail' }
                #text: 'Method'
        a: { name: 'skip-navbar_bottom' }
          #comment: '   '
      #comment: ' ======== END OF BOTTOM NAVBAR ======= '
      p: { class: 'legalCopy' }
        small:
          font: { size: '-1' }
            #text: ''
            a: { href: 'http://bugreport.sun.com/bugreport/' }
              #text: 'Submit a bug or feature'
            br:
            #text: ' For further API reference and developer documentation, see '
            a: { target: '_blank', href: 'http://docs.oracle.com/javase/7/docs/index.html' }
              #text: 'Java SE Documentation'
            #text: '. That documentation contains more detailed, developer-targeted descriptions, with conceptual overviews, definitions of terms, workarounds, and working code examples.'
            br:
            #text: ' '
            a: { href: '../../../../legal/cpyr.html' }
              #text: 'Copyright'
            #text: ' © 1993, 2014, Oracle and/or its affiliates. All rights reserved.'
      #comment: ' Start SiteCatalyst code   '
      script: { src: 'http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js', type: 'text/JavaScript' }
        #text: ''
      script: { src: 'http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js', type: 'text/JavaScript' }
        #text: ''
      #comment: ' ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** '
      #comment: '  Below code will send the info to Omniture server '
      script: { type: 'text/javascript' }
        #text: 'var s_code=s.t();if(s_code)document.write(s_code)'
      #comment: ' End SiteCatalyst code '
      noscript:
        p:
          #text: 'Scripting on this page tracks web page traffic, but does not change the content in any way.'
